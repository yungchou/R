mutate(., n = round(prop * births)) %>%
head(.)
bnames2 = inner_join(bnames, births, by = c("year","sex")) %>%
mutate(., n = round(prop * births)) %>%
head(.)
bnames2 = inner_join(bnames, births, by = c("year","sex")) %>%
mutate(., n = round(prop * births))
head(bnames2)
summary = summarise(group_by(bnames2, name, year), total=sum(n)) %>%
filter(., name=='Vivian', year==1895)
)
summary = summarise(group_by(bnames2, name, year), total=sum(n)) %>% filter(., name=='Vivian', year==1895)
)
summarise(group_by(bnames2, name, year), total=sum(n)) %>%
filter(., name=='Vivian', year==1895)
summary = summarise(group_by(bnames2, name, year), total=sum(n)) %>%
filter(., name=='Vivian', year==1895)
summary
filter(bnames2, name=='Vivian', year==1895)
summary = summarise(group_by(bnames2, name, year), total=sum(n))
head(summary,10)
bnames2 %>%
group_by(name, year) %>%
summarise(total=sum(n))
bnames2 %>%
group_by(name, year) %>%
summarise(total=sum(n)) %>%
head(.)
bnames2 = your_join(bnames, births, by=c("year","sex"))
bnames2
head(bnames2)
inner_join(bnames, births, by=c("year","sex"))
inner_join(bnames, births, by=c("year","sex")) %>%
head(.)
inner_join(bnames, births, by=c("year","sex")) %>%
mutate(., n=prop*birth) %>%
head(.)
inner_join(bnames, births, by=c("year","sex")) %>%
mutate(., n=prop*births) %>%
head(.)
inner_join(bnames, births, by=c("year","sex")) %>%
mutate(., n=round(prop*births)) %>%
head(.)
inner_join(bnames, births, by=c("year","sex")) %>%
mutate(., n=round(prop*births)) %>%
group_by(.,name,year)
head(.)
inner_join(bnames, births, by=c("year","sex")) %>%
mutate(., n=round(prop*births)) %>%
group_by(.,name,year) %>%
head(.)
bnames2
names(bnames)
bnames %>% transmute(.,year,name, abc)
bnames %>% transmute(.,year,name)
bnames %>% transmute(.,year,name) %>% head(.,)
library(ggplot2)
?mpg
head(mpg)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() + geom_smooth(method = "lm")
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_smooth(method = "lm")
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(method = "lm")
g = ggplot(data = mpg, aes(x = displ, y = hwy))
g = ggplot(data = mpg, aes(x = displ, y = hwy))
g = ggplot(data = mpg, aes(x = displ, y = hwy))
g = ggplot(data = mpg, aes(x = displ, y = hwy))
g1 = g + geom_point()
g2 = g1 + geom_smooth(method = "lm")
g <- ggplot(data = mpg, aes(x = displ, y = hwy))
g + geom_point(aes(color = class))
rm(list=ls())
g <- ggplot(data = mpg, aes(x = displ, y = hwy))
g + geom_point(aes(color = class))
g + geom_point(aes(size = class))
g + geom_point(aes(shape = class))
g + geom_point(aes(alpha = class))
g + geom_point(aes(color = class))
g + geom_point(aes(size = class))
g + geom_point(aes(color = class))
g + geom_point(aes(color = class))
g + geom_point(aes(alpha = class))
g + geom_point() + facet_grid(. ~ cyl)
g + geom_point() + facet_grid(drv ~ .)
g + geom_point() + facet_grid(drv ~ cyl)
g + geom_point() + facet_wrap( ~ class)
g + geom_point() + facet_grid(drv ~ cyl ~ .)
g + geom_point() + facet_wrap( ~ class)
names(diamonds)
ggplot(data = diamonds,aes(x =
cut)) + geom_bar(aes(fill =
cut))
ggplot(data = diamonds, aes(x
= color)) +
geom_bar(aes(fill = cut))
+ geom_histogram(aes(fill=cut), binwidth = 0.2,
position = position_stack(reverse=TRUE)) + zoom
+ geom_histogram(aes(fill=cut), binwidth = 0.2,
position = position_stack(reverse=TRUE)) + zoom
g + geom_histogram(aes(fill=cut), binwidth = 0.2,
position = position_stack(reverse=TRUE)) + zoom
g = ggplot(data = mpg, aes(x = displ, y = hwy))
g + geom_histogram(aes(fill=cut), binwidth = 0.2,
position = position_stack(reverse=TRUE)) + zoom
g <- ggplot(data = diamonds, aes(x = depth))
zoom <- coord_cartesian(xlim = c(55, 70))
g + geom_histogram(binwidth = 0.2) + zoom
g + geom_histogram(aes(fill=cut), binwidth = 0.2,
position = position_stack(reverse=TRUE)) + zoom
g + geom_histogram(binwidth = 0.2) + facet_wrap( ~ cut) + zoom
g + geom_histogram(binwidth = 0.2) + geom_freqpoly(binwidth=0.2)
+ facet_wrap( ~ cut) + zoom
g + geom_freqpoly(aes(color = cut), binwidth = 0.2) +
facet_wrap( ~ cut) + zoom
g + geom_freqpoly(aes(color = cut), binwidth = 0.2) + zoom
install.packages(addinslist)
install.packages('addinslist'')
install.packages('addinslist')
addinslist:::addinslistAddin()
addinslist:::addinslistAddin()
ggThemeAssist:::ggThemeAssistAddin()
ggThemeAssist:::ggThemeAssistAddin()
ggThemeAssist:::ggThemeAssistAddin()
library(ggplot2)
g <- ggplot(data = diamonds, aes(x = carat, y = price))
ggThemeAssist:::ggThemeAssistAddin()
g <- ggplot(data = diamonds, aes(x = carat, y = price))
+ theme(plot.subtitle = element_text(vjust = 1),
plot.caption = element_text(vjust = 1),
panel.grid.minor = element_line(linetype = "dotdash"),
panel.background = element_rect(fill = "gray87"),
plot.background = element_rect(fill = "aliceblue"))
g <- ggplot(data = diamonds, aes(x = carat, y = price))
+ theme(plot.subtitle = element_text(vjust = 1),
plot.caption = element_text(vjust = 1),
panel.grid.minor = element_line(linetype = "dotdash"),
panel.background = element_rect(fill = "gray87"),
plot.background = element_rect(fill = "aliceblue"))
ggplot(data = diamonds, aes(x = carat, y = price))
+ theme(plot.subtitle = element_text(vjust = 1),
plot.caption = element_text(vjust = 1),
panel.grid.minor = element_line(linetype = "dotdash"),
panel.background = element_rect(fill = "gray87"),
plot.background = element_rect(fill = "aliceblue"))
ggThemeAssist:::ggThemeAssistAddin()
ggThemeAssist:::ggThemeAssistAddin()
addinslist:::addinslistAddin()
ggThemeAssist:::ggThemeAssistAddin()
library(ggplot2)
ggplot(data = diamonds, aes(x = carat, y = price))
g + geom_point(aes(color = cut))
ggThemeAssist:::ggThemeAssistAddin()
ggThemeAssist:::ggThemeAssistAddin()
library(ggplot2)
g <- ggplot(data = diamonds, aes(x = carat, y = price))
g + geom_smooth(aes(color = cut))
g + geom_point() + geom_density2d()
g + geom_point() + geom_density2d()
g + geom_smooth(aes(color = cut), method = "loess", se = FALSE)
g + geom_point() + geom_smooth(aes(color = cut), method = "loess", se = FALSE)
g + geom_point(size = 0.5)
g + geom_point(size = 0.5, alpha=0.05)
ggExtra:::ggMarginalGadgetAddin ()
ggExtra:::ggMarginalGadgetAddin ()
ggExtra:::ggMarginalGadgetAddin ()
ggExtra:::ggMarginalGadgetAddin ()
#Code supplied by james cheshire Feb 2012
#load packages and enter development mode
library('devtools')
dev_mode()
library(ggplot2)
library(proto)
#if your map data is a shapefile use maptools
library(maptools)
gpclibPermit()
#create GeomSegment2 function
GeomSegment2 objname <- “geom_segment2″
draw if (is.linear(coordinates)) {
return(with(coord_transform(coordinates, data, scales),
segmentsGrob(x, y, xend, yend, default.units=”native”,
gp = gpar(col=alpha(colour, alpha), lwd=size * .pt,
lty=linetype, lineend = “round”),
arrow = arrow)
))
}
}})
geom_segment2 “identity”, position = “identity”, arrow = NULL, …) {
GeomSegment2$new(mapping = mapping, data = data, stat = stat,
position = position, arrow = arrow, …)
}
#load data stlat/stlong are the start points elat/elong are the end points of the lines
lon names(lon)<-c(“stlat”, “stlon”, “elat”, “elong”, “count”)
#load spatial data. You need to fortify if loaded as a shapefile
water built
#This step removes the axes labels etc when called in the plot.
xquiet yquiet<-scale_y_continuous(“”, breaks=NA)
quiet<-list(xquiet, yquiet)
#create base plot
plon1
#ready the plot layers
pbuilt<-c(geom_polygon(data=built, aes(x=long, y=lat, group=group), colour= “#4B4B4B”, fill=”#4F4F4F”, lwd=0.2))
pwater<-c(geom_polygon(data=water, aes(x=long, y=lat, group=group), colour= “#708090″, fill=”#708090”))
#create plot
plon2
#done
plon2
library('devtools')
dev_mode()
library(ggplot2)
library(proto)
#if your map data is a shapefile use maptools
library(maptools)
gpclibPermit()
#create GeomSegment2 function
GeomSegment2 objname <- “geom_segment2″
draw if (is.linear(coordinates)) {
return(with(coord_transform(coordinates, data, scales),
segmentsGrob(x, y, xend, yend, default.units=”native”,
gp = gpar(col=alpha(colour, alpha), lwd=size * .pt,
lty=linetype, lineend = “round”),
arrow = arrow)
))
}
}})
geom_segment2 “identity”, position = “identity”, arrow = NULL, …) {
GeomSegment2$new(mapping = mapping, data = data, stat = stat,
position = position, arrow = arrow, …)
}
#load data stlat/stlong are the start points elat/elong are the end points of the lines
lon names(lon)<-c(“stlat”, “stlon”, “elat”, “elong”, “count”)
#load spatial data. You need to fortify if loaded as a shapefile
water built
#This step removes the axes labels etc when called in the plot.
xquiet yquiet<-scale_y_continuous(“”, breaks=NA)
quiet<-list(xquiet, yquiet)
#create base plot
plon1
#ready the plot layers
pbuilt<-c(geom_polygon(data=built, aes(x=long, y=lat, group=group), colour= “#4B4B4B”, fill=”#4F4F4F”, lwd=0.2))
pwater<-c(geom_polygon(data=water, aes(x=long, y=lat, group=group), colour= “#708090″, fill=”#708090”))
#create plot
plon2
#done
plon2
install.packages(devtools)
install.packages('devtools'')
install.packages('devtools')
install.packages("devtools")
install.packages("proto")
source('~/.active-rstudio-document', encoding = 'UTF-8')
library('devtools')
dev_mode()
library(ggplot2)
library(proto)
#if your map data is a shapefile use maptools
library(maptools)
gpclibPermit()
#create GeomSegment2 function
GeomSegment2 objname <- “geom_segment2″
draw if (is.linear(coordinates)) {
return(with(coord_transform(coordinates, data, scales),
segmentsGrob(x, y, xend, yend, default.units=”native”,
gp = gpar(col=alpha(colour, alpha), lwd=size * .pt,
lty=linetype, lineend = “round”),
arrow = arrow)
))
}
}})
geom_segment2 “identity”, position = “identity”, arrow = NULL, …) {
GeomSegment2$new(mapping = mapping, data = data, stat = stat,
position = position, arrow = arrow, …)
}
#load data stlat/stlong are the start points elat/elong are the end points of the lines
lon names(lon)<-c(“stlat”, “stlon”, “elat”, “elong”, “count”)
#load spatial data. You need to fortify if loaded as a shapefile
water built
#This step removes the axes labels etc when called in the plot.
xquiet yquiet<-scale_y_continuous(“”, breaks=NA)
quiet<-list(xquiet, yquiet)
#create base plot
plon1
#ready the plot layers
pbuilt<-c(geom_polygon(data=built, aes(x=long, y=lat, group=group), colour= “#4B4B4B”, fill=”#4F4F4F”, lwd=0.2))
pwater<-c(geom_polygon(data=water, aes(x=long, y=lat, group=group), colour= “#708090″, fill=”#708090”))
#create plot
plon2
#done
plon2
library('devtools')
dev_mode()
library(ggplot2)
library(proto)
#if your map data is a shapefile use maptools
library(maptools)
gpclibPermit()
#create GeomSegment2 function
GeomSegment2 objname <- “geom_segment2″
draw if (is.linear(coordinates)) {
return(with(coord_transform(coordinates, data, scales),
segmentsGrob(x, y, xend, yend, default.units=”native”,
gp = gpar(col=alpha(colour, alpha), lwd=size * .pt,
lty=linetype, lineend = “round”),
arrow = arrow)
))
}
}})
geom_segment2 “identity”, position = “identity”, arrow = NULL, …) {
GeomSegment2$new(mapping = mapping, data = data, stat = stat,
position = position, arrow = arrow, …)
}
#load data stlat/stlong are the start points elat/elong are the end points of the lines
lon names(lon)<-c(“stlat”, “stlon”, “elat”, “elong”, “count”)
#load spatial data. You need to fortify if loaded as a shapefile
water built
#This step removes the axes labels etc when called in the plot.
xquiet yquiet<-scale_y_continuous(“”, breaks=NA)
quiet<-list(xquiet, yquiet)
#create base plot
plon1
#ready the plot layers
pbuilt<-c(geom_polygon(data=built, aes(x=long, y=lat, group=group), colour= “#4B4B4B”, fill=”#4F4F4F”, lwd=0.2))
pwater<-c(geom_polygon(data=water, aes(x=long, y=lat, group=group), colour= “#708090″, fill=”#708090”))
#create plot
plon2
#done
plon2
install.packages('maptools')
library('devtools')
dev_mode()
library(ggplot2)
library(proto)
#if your map data is a shapefile use maptools
library(maptools)
gpclibPermit()
#create GeomSegment2 function
GeomSegment2 objname <- “geom_segment2″
draw if (is.linear(coordinates)) {
return(with(coord_transform(coordinates, data, scales),
segmentsGrob(x, y, xend, yend, default.units=”native”,
gp = gpar(col=alpha(colour, alpha), lwd=size * .pt,
lty=linetype, lineend = “round”),
arrow = arrow)
))
}
}})
geom_segment2 “identity”, position = “identity”, arrow = NULL, …) {
GeomSegment2$new(mapping = mapping, data = data, stat = stat,
position = position, arrow = arrow, …)
}
#load data stlat/stlong are the start points elat/elong are the end points of the lines
lon names(lon)<-c(“stlat”, “stlon”, “elat”, “elong”, “count”)
#load spatial data. You need to fortify if loaded as a shapefile
water built
#This step removes the axes labels etc when called in the plot.
xquiet yquiet<-scale_y_continuous(“”, breaks=NA)
quiet<-list(xquiet, yquiet)
#create base plot
plon1
#ready the plot layers
pbuilt<-c(geom_polygon(data=built, aes(x=long, y=lat, group=group), colour= “#4B4B4B”, fill=”#4F4F4F”, lwd=0.2))
pwater<-c(geom_polygon(data=water, aes(x=long, y=lat, group=group), colour= “#708090″, fill=”#708090”))
#create plot
plon2
#done
plon2
library('devtools')
dev_mode()
library(ggplot2)
library(proto)
#if your map data is a shapefile use maptools
library(maptools)
gpclibPermit()
#create GeomSegment2 function
GeomSegment2 objname <- “geom_segment2″
draw if (is.linear(coordinates)) {
return(with(coord_transform(coordinates, data, scales),
segmentsGrob(x, y, xend, yend, default.units=”native”,
gp = gpar(col=alpha(colour, alpha), lwd=size * .pt,
lty=linetype, lineend = “round”),
arrow = arrow)
))
}
}})
geom_segment2 “identity”, position = “identity”, arrow = NULL, …) {
GeomSegment2$new(mapping = mapping, data = data, stat = stat,
position = position, arrow = arrow, …)
}
#load data stlat/stlong are the start points elat/elong are the end points of the lines
lon names(lon)<-c(“stlat”, “stlon”, “elat”, “elong”, “count”)
#load spatial data. You need to fortify if loaded as a shapefile
water built
#This step removes the axes labels etc when called in the plot.
xquiet yquiet<-scale_y_continuous(“”, breaks=NA)
quiet<-list(xquiet, yquiet)
#create base plot
plon1
#ready the plot layers
pbuilt<-c(geom_polygon(data=built, aes(x=long, y=lat, group=group), colour= “#4B4B4B”, fill=”#4F4F4F”, lwd=0.2))
pwater<-c(geom_polygon(data=water, aes(x=long, y=lat, group=group), colour= “#708090″, fill=”#708090”))
#create plot
plon2
#done
plon2
gpclibPermit()
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
library(ggplot2)
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
g + geom_point(aes(color = class))
g <- ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
g + geom_point(aes(color = class))
names(diamonds)
ggplot(data = diamonds,aes(x = cut, y=price)) + geom_bar(aes(fill = cut))
ggplot(data = diamonds,aes(y = cut, x=price)) + geom_bar(aes(fill = cut))
ggplot(data = diamonds,aes(x=price)) + geom_bar(aes(fill = cut))
ggplot(data = diamonds,aes(x=cut)) + geom_bar(aes(fill = cut))
ggplot(data = diamonds,aes(x=clarity)) + geom_bar(aes(fill = cut))
ggplot(data = diamonds,aes(x=clarity, y=cut))
ggplot(data = diamonds,aes(x=carat, y=cut))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
billboard <- readr::read_csv("n:/dataset/messy.data/billboard.csv")
knitr::opts_chunk$set(echo = FALSE)
billboard2 <- billboard %>%
gather(key="week", value="rank", wk1:wk76, na.rm = TRUE)
r
head(billboard2)
billboard
install.packages(tidyverse)
install.packages(tidyverse)
install.packages('tidyverse')
install.packages("tidyverse")
library(tidyverse)
billboard <- readr::read_csv("n:/dataset/messy.data/billboard.csv")
billboard <- read_csv("n:/dataset/messy.data/billboard.csv")
billboard <- read.csv("n:/dataset/messy.data/billboard.csv")
head(billboard)
billboard2 <- billboard %>%
gather(key="week", value="rank", wk1:wk76, na.rm = TRUE)
head(billboard2)
unique(billboard$week)
unique(billboard$week)
unique(billboard2$week)
unique(billboard2$rank)
head(unique(billboard2$rank))
head(unique(billboard2$week))
names(billboard)
head(names(billboard))
head(names(billboard), 10)
# Gather
# Create a new column
head(names(billboard2))
billboard3 <- billboard2 %>%
mutate(
week = readr::parse_number(week),
date = readr::parse_date(date.entered) + 7 * (week - 1)) %>%
select(-date.entered)
head(billboard3)
## Messy Data Type #1
weather <- readr::read_csv("./data/weather.csv")
## Messy Data Type #1
weather <- readr::read_csv("n:/dataset/messy.data/weather.csv")
weather <- read.csv("n:/dataset/messy.data/weather.csv")
names(weather)
head(weather)
head(weather,3)
weather2 <- weather %>%
gather(day, value, d1:d31, na.rm = TRUE) %>%
mutate(day=readr::parse_number(day))
head(weather2)
weather2 <- weather %>%
gather(key=day, rank=value, d1:d31, na.rm = TRUE) %>%
mutate(day=readr::parse_number(day))
head(weather2)
?gather
billboard2 <- billboard %>%
gather(.,key="week", value="rank", wk1:wk76, na.rm = TRUE)
names(billboard2)
head(billboard2)
## Messy Data Type #1
weather <- read.csv("n:/dataset/messy.data/weather.csv")
names(weather)
head(weather,3)
weather2 <- weather %>%
gather(key=day, rank=value, d1:d31, na.rm = TRUE) %>%
mutate(day=readr::parse_number(day))
head(weather2)
?mutate
?`readr
?readr
?readr
install.packages("shiny")
shiny::runApp('C:/Users/da/Desktop/shinyDemo')
install.packages(plotly)
install.packages('plotly')
install.packages('ggplot2'')
install.packages('ggplot2')
#install.packages('ggplot2')
library(ggplot2)
g = ggplot(data = mpg, aes(x = displ, y = hwy))
heead(mpg)
head(mpg)
g1 = g + geom_point()
g1 = g + geom_point()
g + geom_point()
g + geom_smooth(method = "lm")
?gemo
unlink('N:/w1.R/Knitr_and_RMarkdown/example_cache', recursive = TRUE)

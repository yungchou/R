library(C3)
shiny::runApp('C:/Users/da/Desktop/abc')
runApp('C:/Users/da/Desktop/abc')
shiny::runApp('N:/shiny.iot.base')
runApp('N:/shiny.iot.base')
runApp('N:/shiny.iot.base')
rm(list=ls())
runApp('N:/shiny.iot.base')
runApp('N:/shiny.iot.base')
runApp('N:/shiny.iot.base')
runApp('N:/shiny.iot.base')
runApp('N:/shiny.iot.base')
rm=(list=ls())
rm(list=ls())
runApp('N:/shiny.iot.base')
knitr::opts_chunk$set(echo = TRUE)
#devtools::install_github("sailthru/tidyjson")
library(tidyjson)
library(dplyr)
library(rjson)
library(anytime)
df <- read.csv('myIoTSensorData.csv') %>%
select(Timestamp, message) %>%
mutate(Timestamp, Timestamp=anytime(as.character(Timestamp))) %>%
mutate(message, message=as.character(message))
getwd()
df <- read.csv('myIoTSensorData.csv') %>%
select(Timestamp, message) %>%
mutate(Timestamp, Timestamp=anytime(as.character(Timestamp))) %>%
mutate(message, message=as.character(message))
rm(list=ls())
#devtools::install_github("sailthru/tidyjson")
library(tidyjson)
library(dplyr)
library(rjson)
library(anytime)
df <- read.csv('myIoTSensorData.csv') %>%
select(Timestamp, message) %>%
mutate(Timestamp, Timestamp=anytime(as.character(Timestamp))) %>%
mutate(message, message=as.character(message))
getwd()
df <- read.csv('myIoTSensorData.csv') %>%
select(Timestamp, message) %>%
mutate(Timestamp, Timestamp=anytime(as.character(Timestamp))) %>%
mutate(message, message=as.character(message))
df <- read.csv('myIoTSensorData.csv') %>%
select(Timestamp, message) %>%
mutate(Timestamp, Timestamp=anytime(as.character(Timestamp))) %>%
mutate(message, message=as.character(message))
u=runif(12*1000)
mat=matrix(data=u, nrow=12)
norvec=colsum(mat)
hist(norvec)
hist(normvec)
normvec=colsum(mat)
hist(normvec)
normvec=colSums(mat)
hist(normvec)
z=rnorm(10,1000)
z=rnorm(10*1000)
zSq=z*z
z=rnorm(10*1000)
zSq=z*z
chimat=matrix(zSq,10,1000)
chiSqvec=colSums(chimat)
hist(chiSqvec)
hist(rchisq(1000,10), add=T, col='red')
# F distribution
# two datasets, one size 10 and the other 20
#  test if the ratio of variance is 1
z2=rnorm(20*1000)
zSq2=z2*z2
chimat2=matrix(zSq2,20,1000)
chiSqvec2=colSums(chimat2)
(chiSqvec/10)/(chiSqvec2/20)
fvec = (chiSqvec/10)/(chiSqvec2/20)
fvec
hist(fvect)
hist(fvec)
hist(fvec, add=T)
hist(rf(1000,df1=10,df2=20), col='red')
hist(fvec, add=T, col='blue')
hist(rf(1000,df1=10,df2=20), col='red')
hist(rf(1000,df1=10,df2=20), col='red')
hist(fvec, add=T, col='blue')
library(dplyr)
library(ggplot2)
library(tidyr)
library(purrr)
df <- read.csv('n:/dataset/recent-grads.csv', header = TRUE)
na.omit(df)
df %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(bins=60) +
theme_bw()
df1 <- df %>%
keep(is.factor) %>% group_by(Major_category) %>% summarise(n=n())
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df1 <- df %>%
keep(is.factor) %>% group_by(sort(Major_category)) %>% summarise(n=n())
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df1
df1 <- df %>%
keep(is.factor) %>% group_by(Major_category) %>% summarise(n=n()) %>% sort(n)
df1 <- df %>%
keep(is.factor) %>% group_by(Major_category) %>% summarise(n=n())
df1
?order
?sort
sort(df1$n)
sort(df1$n, desc)
sort(df1$n, descreasing=T)
sort(df1$n, desc)
desc(df1$n)
sort(df1$n)
sort(df1$n, desc())
sort(df1$n, desc(n))
sort(df1$n, decreasing = TRUE)
df1 <- df %>%
keep(is.factor) %>% group_by(Major_category) %>% summarise(n=n()) %>% sort(df1$n, decreasing = TRUE)
df1 <- df %>%
keep(is.factor) %>% group_by(Major_category) %>% summarise(n=n())
sort(df1$n, decreasing = TRUE)
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
sort(df1$n, decreasing = TRUE)
df1 <- sort(df1$n, decreasing = TRUE)
df1
df1 <- df %>%
keep(is.factor) %>% group_by(Major_category) %>% summarise(n=n())
df1$n <- sort(df1$n, decreasing = TRUE)
df1
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n)) +
coord_flip()
df1 <- df %>%
keep(is.factor) %>% group_by(Major_category) %>% summarise(n=n())
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n)) +
coord_flip()
df1$n <- sort(df1$n)
df1$n
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n)) +
coord_flip()
df1
df %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(bins=60) +
theme_bw()
df <- read.csv('n:/dataset/recent-grads.csv', header = TRUE)
df %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(bins=60) +
theme_bw()
df1 <- df %>%
keep(is.factor) %>% group_by(Major_category) %>% summarise(n=n())
df1
df1$n <- sort(df1$Makor_category)
df1$Maajor_category<- sort(df1$Major_category)
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n)) +
coord_flip()
df1 <- df %>%
keep(is.factor) %>% group_by(Major_category) %>% summarise(n=n())
df1$Maajor_category<- sort(df1$Major_category)
df1$Major_category<- sort(df1$Major_category)
df1$Major_category
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n)) +
coord_flip()
df1$Major_category<- sort(df1$Major_category)
df1
df1$n<- sort(df1$n)
df1
df1 <- df %>%
keep(is.factor) %>% group_by(Major_category) %>% summarise(n=n())
df1
df1$Major_category[1:2]
df1$Major_category[1:3]
df1 <- df %>%
keep(is.factor) %>% group_by(Major_category) %>% summarise(n=n())
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n)) +
coord_flip()
facet_wrap(~n, scales = "free") +
geom_bar(aes(y=color))
ggplot(df1,aes(x=Major_category)) +
geom_bar(aes(y=n)) +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n)) +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(fill=n)) +
coord_flip()
ggplot(df1,aes(x=Major_category, fill=n)) +
geom_col() +
coord_flip()
ggplot(df1,aes(x=Major_category, fill=y)) +
geom_col() +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(fill=n)) +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n)) +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_histogram(aes(y=n)) +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_bar(aes(y=n)) +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n)) +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n), color=Major_category) +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n), color=Major_category, stat='identity') +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_col(color=Major_category, stat='identity') +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_col(color='Major_category', stat='identity') +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n),color='Major_category', stat='identity') +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n,color='Major_category'), stat='identity') +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n,fill='Major_category'), stat='identity') +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n,color='Major_category'), stat='identity') +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n,color='Major_category')) +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n,fill='Major_category')) +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n,color='Major_category')) +
coord_flip()
ggplot(df1,aes(x=Major_category)) +
geom_col(aes(y=n)) +
coord_flip()
ggplot(df1,aes(x=Major_category)) + theme_bw() +
geom_col(aes(y=n)) +
coord_flip()
facet_wrap(~n, scales = "free") +
ggplot(df1,aes(x=Major_category)) + theme_bw() +
geom_col(aes(y=n)) +
facet_wrap(~n, scales = "free") +
geom_bar(aes(y))
ggplot(df1,aes(x=Major_category)) + theme_bw() +
geom_col(aes(y=n)) +
facet_wrap(~n, scales = "free")
df1
df
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Major_category)) +
facet_wrap(~Major_category, scales = "free")
geom_col(aes() +
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col() +
facet_wrap(~Major_category, scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col() +
facet_wrap(~Major_category, scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
facet_wrap(~Major, scales = "free")
ggplot(df,aes(x=Major_category)) + theme_bw() +
geom_col(y=Major)
ggplot(df,aes(x=Major_category)) + theme_bw() +
geom_col(y=Major) +
facet_wrap(~Major, scales = "free")
ggplot(df,aes(x=Major_category)) + theme_bw() +
geom_col(aes(y=Major)) +
facet_wrap(~Major, scales = "free")
ggplot(df,aes(x=Major_category)) + theme_bw() +
geom_col(aes(y=Major))
ggplot(df,aes(x=Major_category)) + theme_bw() +
geom_col(aes(y=Major))
df
ggplot(df,aes(x=Major_category)) + theme_bw() +
geom_col(aes(y=Major)) +
facet_wrap(~Major_category)
ggplot(df) + theme_bw() +
geom_col(aes(y=Major)) +
facet_wrap(~Major_category)
ggplot(df,aes(x=Major_category)) + theme_bw() +
geom_col(aes(color=Major)) +
facet_wrap(~Major_category)
ggplot(df,aes(x=Major_category)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(~Major_category)
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(~Major_category)
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(~Major_category, scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(~Major_category, scales = "free") +
coord_flip()
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(~Major_category, scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(~Major_category, scales = "free") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(~Major_category, scales = "free") +
theme(axis.text.x = element_text(angle = 90))
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(~Major_category, scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(~Major_category, scales = "free") +
coord_flip()
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(~Major_category, scales = "free") +
theme(axis.text.x = element_text(angle = 30))
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(~Major_category, scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(Major_category~, scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(Major_category~, scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(Major_category~, scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(Major_category~., scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_grid(~Major_category, scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_grid(Major_category~., scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(Major~Major_category., scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(Major~Major_category, scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(Major ~ Major_category, scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(.~ Major_category, scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Employed)) +
facet_wrap(.~ Major_category, scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Sample_size)) +
facet_wrap(.~ Major_category, scales = "free")
ggplot(df,aes(x=Major)) + theme_bw() +
geom_col(aes(y=Total)) +
facet_wrap(.~ Major_category, scales = "free")
df %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(bins=60) +
theme_bw()
shiny::runApp('N:/shiny.iot.base')
i=i+1
i=0
while(i<100){
dat=data.frame(
timestamp=as.numeric(Sys.time()),
sensorID=sensorID,
longitude=longitude,
latitude=latitude,
temperature=rnorm(n=4,mean=30,sd=1))
write.csv(dat,
paste0("sensorData",gsub("[^0-9]","",Sys.time()),".csv"),
row.names = FALSE)
i=i+1
Sys.sleep(2)
}
rm(list=ls())
# Library
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
library(dygraphs)
library(xts)    # To make the convertion data-frame / xts format
sim_rt_files <- read.csv(
'N:/code/R/shiny/shiny.iot.base.v2/iot_sample_data.csv',
header = TRUE)
source <- sim_rt_files
df <- na.omit(source) %>%
select( Timestamp, message ) %>%
mutate( Timestamp = anytime( as.character(Timestamp) ) ) %>%
arrange( Timestamp ) %>%
mutate( message = as.character(message) )
df1 <- df$message %>% as.tbl_json %>%
gather_array %>%
spread_values(
msgID = jstring("messageId"),
devID = jstring("deviceId"),
temperature = jnumber("temperature"),
humidity = jnumber("humidity")) %>%
select(devID, temperature, humidity)
devices <- df1[devID]
df <- na.omit(source) %>%
select( Timestamp, message ) %>%
mutate( Timestamp = anytime( as.character(Timestamp) ) ) %>%
arrange( Timestamp ) %>%
mutate( message = as.character(message) )
rm(list=ls())
# Library
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
library(dygraphs)
library(xts)    # To make the convertion data-frame / xts format
sim_rt_files <- read.csv(
'N:/code/R/shiny/shiny.iot.base.v2/iot_sample_data.csv',
header = TRUE)
source <- sim_rt_files
df <- na.omit(source) %>%
select( Timestamp, message ) %>%
mutate( Timestamp = anytime( as.character(Timestamp) ) ) %>%
arrange( Timestamp ) %>%
mutate( message = as.character(message) )
library(dplyr)
df <- na.omit(source) %>%
select( Timestamp, message ) %>%
mutate( Timestamp = anytime( as.character(Timestamp) ) ) %>%
arrange( Timestamp ) %>%
mutate( message = as.character(message) )
library(anytime)
df <- na.omit(source) %>%
select( Timestamp, message ) %>%
mutate( Timestamp = anytime( as.character(Timestamp) ) ) %>%
arrange( Timestamp ) %>%
mutate( message = as.character(message) )
df1 <- df$message %>% as.tbl_json %>%
gather_array %>%
spread_values(
msgID = jstring("messageId"),
devID = jstring("deviceId"),
temperature = jnumber("temperature"),
humidity = jnumber("humidity")) %>%
select(devID, temperature, humidity)
library(tidyjson)
df1 <- df$message %>% as.tbl_json %>%
gather_array %>%
spread_values(
msgID = jstring("messageId"),
devID = jstring("deviceId"),
temperature = jnumber("temperature"),
humidity = jnumber("humidity")) %>%
select(devID, temperature, humidity)
devices <- df1[devID]
df1$devID
devices <- unique(df1$devID)
devices
devices <- devices[tstamp, c(dt, AvgTemp, dev)]
devices <- devices[, c(tstamp, AvgTemp, dev)]
library(readr)
GlobalLandTemperaturesByMajorCity <- read_csv("C:/Users/da/Desktop/shinny.ts/GlobalLandTemperaturesByMajorCity.csv")
View(GlobalLandTemperaturesByMajorCity)
dim(temp_data)
temp_data <- fread("GlobalLandTemperaturesByMajorCity.csv")
temp_data <- fread("C:/Users/da/Desktop/shinny.ts/GlobalLandTemperaturesByMajorCity.csv")
require(data.table)
install.packages(data.table)
"data.table"
temp_data <- fread("C:/Users/da/Desktop/shinny.ts/GlobalLandTemperaturesByMajorCity.csv")
dim(temp_data)
str(temp_data)

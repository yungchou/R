install.packages(c("ape", "AzureRMR", "backports", "DT", "fs", "geomorph", "ggplot2", "glmnet", "gower", "haven", "htmltools", "httpuv", "isoband", "jsonlite", "knitr", "later", "lubridate", "naniar", "nloptr", "openssl", "promises", "raster", "recipes", "rmarkdown", "roxygen2", "RRPP", "shiny", "SQUAREM", "tidyjson", "tinytex", "vctrs", "xfun"))
ls()
library(h2o)
h2o.init()
h2o.no_progress()  # Turn off progress bars for notebook readability
install.packages(c("anytime", "ape", "AzureAuth", "AzureGraph", "AzureRMR", "AzureVM", "backports", "bit", "bit64", "broom", "Cairo", "callr", "cli", "clipr", "covr", "data.table", "dendextend", "devtools", "diffobj", "digest", "dplyr", "DT", "e1071", "foreach", "fs", "glue", "gplots", "h2o", "htmlwidgets", "httr", "iterators", "jomo", "jsonlite", "knitr", "labeling", "lava", "lme4", "lmtest", "maptools", "mice", "misc3d", "mnormt", "Momocs", "naniar", "nloptr", "openssl", "pillar", "pkgbuild", "processx", "ps", "psych", "R.methodsS3", "R.oo", "R.utils", "raster", "Rcpp", "readr", "recipes", "remotes", "rgeos", "rJava", "rlang", "rmarkdown", "rvest", "sf", "shape", "sp", "SQUAREM", "statmod", "stringi", "sys", "systemfonts", "tibble", "tidyr", "tinytex", "TTR", "usethis", "vctrs", "vdiffr", "withr", "xfun", "xts"))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("E:/git/R")
knitr::opts_chunk$set(echo = TRUE)
install.packages("knitr")
p<-c("knitr")
if(!require(p)){install.packages(p, dependency=TRUE, clean=TRUE); library(p, character.only=TRUE)}
sub_id <- "12345678-aaaa-bbbb-cccc-0123456789ab"
az <- create_azure_login()
library(AzureVM)
az <- create_azure_login()
p<-c('AzureRMR')
if(!require(p)){install.packages(p, dependency=TRUE, clean=TRUE); library(p, character.only=TRUE)}
install.packages(p, dependency = TRUE, clean = TRUE)
az <- create_azure_login()
library(AzureVM)
az <- create_azure_login()
az <- AzureRMR::create_azure_login()
sub_id <- "12345678-aaaa-bbbb-cccc-0123456789ab"
sub <- AzureRMR::get_azure_login()$get_subscription("sub_id")
sub_id <- "501dac25-f925-43f6-af0d-ff5418ddc9b7"
sub <- AzureRMR::get_azure_login()$get_subscription("sub_id")
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
library(RColorBrewer)
library(dygraphs)
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("dygraphs")
install.packages("xts")
install.packages("RColorBrewer")
df <- na.omit(source) %>%
select( Timestamp, message ) %>%
mutate( Timestamp = anytime( as.character(Timestamp) ) ) %>%
arrange( Timestamp ) %>%
mutate( message = as.character(message) )
install.packages(c("AzureAuth", "AzureGraph", "AzureRMR", "AzureStor", "backports", "cachem", "crayon", "highr", "jsonlite", "knitr", "lifecycle", "magrittr", "mime", "promises", "rappdirs", "Rcpp", "rlang", "rmarkdown", "rprojroot", "tinytex", "withr", "xfun", "zoo"))
library(shiny); runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
install.packages(dygraphs)
install.packages("dygraphs")
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.R')
install.packages("plotly")
install.packages("ggplot2")
install.packages("dygraphs")
library(shiny); runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.R')
runApp('shiny/sampleApp/samples.v1.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
names(mtcars)
names(mtcars)[1]
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/react.vs.observe.R')
Sys.time()
Sys.info()
Sys.info().user
Sys.info()[user]
Sys.info()["user"]
Sys.info()["login"]
Sys.info()["name"]
Sys.info()
library(shiny); runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
library(shiny); runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
Sys.info()
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
install.packages(shinydashboard)
install.packages(shinydashboard)
runApp('shiny/sampleApp/samples.v1.5.R')
sysinfoDf<-data.frame(sys.info())
library(shiny); runApp('shiny/sampleApp/samples.v1.5.R')
library(shiny); runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
runApp('shiny/sampleApp/samples.v1.5.R')
pkgs <- c(
"shiny","shinydashboard","rattle"
,"ggplot2","plotly","dygraphs"
,"tidyr","dplyr"
,"rattle","magrittr"
,"readr","readxl","xlsx"
#,"xts"    # To make the conversion data-frame / xts format
#  ,"usmap"
#  ,"proto"
#  ,"gsubfn"
#  ,"stringr"
#  ,"RCurl"
#  ,"RJSONIO"
#  ,"sqldf"
)
for (i in pkgs){
if(! i %in% installed.packages()){
install.packages(i, dependencies = TRUE)
}
require(i)
}
pkgs
runApp('shiny/sampleApp/samples.v1.5.R')
my_packages <- c("shiny","shinydashboard" ,"ggplot2")
installed.packages()[ , "Package"]
installed.packages()
my_packages %in% installed.packages()
my_packages[!(my_packages %in% installed.packages()]
my_packages[!(my_packages %in% installed.packages())]
not_installed <- my_packages[!(my_packages %in% installed.packages())]
install.packages(not_installed)
install.packages(not_installed)
not_installed

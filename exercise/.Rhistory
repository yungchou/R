comp_interest = function(P, r, n) {
A = P * (1+(r/100))^n
print (A)
}
comp_interest(5000, 11.5, c(1:15))
p = 5000; r = 11.5; n = 1:15
c( p*(1 + r/100)^n )
heights <- c(180, 165, 160, 193)/100
weights <- c(87, 58, 65, 100)
BMI <- weights/(heights**2)
tall <- heights > 182.88/100
tall
height.meter <- c(180, 165, 160, 193)/100
weight.kg <- c(87, 58, 65, 100)
bmi <- c(weight.kg/height.meter^2); bmi
meter.to.foot = 3.28084
tall <- over.6foot <- c( height.meter*meter.to.foot > 6 ); tall
print(cars[1:5,])
print(cars[1:5,])
set.seed(0)
state  = sample(c("NY","CA","CT"), length(cars[,1]), replace = TRUE)
cars = data.frame(cars, state = state)
cars = data.frame(cars, ratio = cars$dis / cars$speed)
average_ration = mean(cars$ratio)
sd_ration = sd(cars$ratio)
sd_ration
data(cars)
head(cars,5)
set.seed(0)
state <- sample( c('NY','CA','CT'), nrow(cars), replace=TRUE )
cars$state <- state; head(cars)
cars$ratio <- cars$dist/cars$speed; head(cars)
cat( 'ratio average = ', mean(cars$ratio), '\nratio sd = ', sd(cars$ratio) )
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
cat('num of obs = ', nrow(ts_data), '\nnum of var = ', ncol(ts_data))
sapply(ts_data, class)
cat('missing values in ts_data = ',sum(is.na(ts_data)))
rows.with.missing.values <- ts_data[!complete.cases(ts_data), ]; head(rows.with.missing.values, 3)
cols.with.missing.values = c()
for(x in names(ts_data)){
ifelse(
is.na(ts_data[x]),
cols.with.missing.values <- c(cols.with.missing.values, x),
next()
)}
cols.with.missing.values
!complete.cases(ts_data)
rows.with.missing.values <- sum(!complete.cases(ts_data); head(rows.with.missing.values, 3)
rows.with.missing.values <- sum(!complete.cases(ts_data)); head(rows.with.missing.values, 3)
?lapply
ts_data
lapply( ts_data, function(x) any(is.na(x)) )
lapply( ts_data, any( is.na(x) ) )
function(x) any( is.na(x) )
lapply( ts_data, function(x) {any( is.na(x) )} )
lapply( ts_data, function(x){ any( is.na(x); print(x) ) } )
?rnorm
?do.call
x<- list(a=1:5, b rnorm(10))
x <- list(a=1:5, b rnorm(10))
x <- list(a=1:5, b=rnorm(10))
x
lapply(x, mean)
4e6
as.integer(4e6)
x = c(1,1)
x[1]
x[2]
i = 2; x = c(1,1)
while ( x[i]< 4e6 ) {
x[i+1] = x[i] + x[i-1]
i = i+1
}
x
i
max(x)
x[-i]
max(x)
max(x)
x
x = x[-i]
x
max(x)
x%%2==0
fib = function(x){
if(x==1) return(1)
if(x==2) return(1)
return( fib(x-1)+fib(x-2) )
}
fibseq = function(x){
fibseq=c()
for (i in 1:x){ fibseq<-c(fibseq,fib(i)) }
return(cat('fibonaci(',x,') = ',fibseq))
}
f=c(1,1); i=3
while( ( this1<-fib(i) ) < 4000000 ){
f = c(f, this1)
i = i + 1
}
f
sum(f)
f
sum(f)
i = 2; x = c(1,1)
while ( x[i]< 4e6 ) {
x[i+1] = x[i] + x[i-1] # fibonaci
i = i+1
}
x = x[-i] # remove the last one
max(x)
sum(x[x%%2==0])
a= c(1,2,3)
a[1]
a[2]
a=c(12,34,19)
a[1]
a
a[2]
a[3]
4E6
as.integer(4E6)
fib = 0; tmp = 1; sum = 0
fibseq <- c(0,1)
while(fib <= 4e6){
fibseq <- c(fibseq, fib = fib + tmp)
tmp = fib - tmp
if (fib %% 2 == 0){
sum = sum + fib
}
}
fibseq
fib = 0; tmp = 1; sum = 0
fibseq <- c(0,1)
while(fib <= 4e6){
fib = fib + tmp
fibseq <- c(fibseq, fib)
print(fibseq)
tmp = fib - tmp
if (fib %% 2 == 0){
sum = sum + fib
}
}
fibseq
fib = 0; tmp = 1; sum = 0
fibseq <- c(0,1)
while(fib <= 4e6){
fib = fib + tmp
fibseq <- c(fibseq, fib)
tmp = fib - tmp
if (fib %% 2 == 0){
sum = sum + fib
}
}
fibseq
# version 2
fib = 1; tmp = 1; sum = 0
fibseq <- c(1)
while(fib <= 4e6){
fib = fib + tmp
fibseq <- c(fibseq, fib)
tmp = fib - tmp
if (fib %% 2 == 0){
sum = sum + fib
}
}
fibseq
# version 2
fib = 1; tmp = 1; sum = 0
fibseq <- c(0)
while(fib <= 4e6){
fib = fib + tmp
fibseq <- c(fibseq, fib)
tmp = fib - tmp
if (fib %% 2 == 0){
sum = sum + fib
}
}
fibseq
fib = 1; tmp = 1; sum = 0
fibseq <- c(1,1)
while(fib <= 4e6){
fib = fib + tmp
fibseq <- c(fibseq, fib)
tmp = fib - tmp
if (fib %% 2 == 0){
sum = sum + fib
}
}
fibseq
fibseq <- c(1,1)
fib1 = 1; fib2 = 1
sum = 0
while(fib2 <= 4e6){
fib2 = fib2 + fib1
fibseq <- c(fibseq, fib2<- fib2+fib1 )
fib1 = fib2 - fib1
if (fib2 %% 2 == 0){
sum = sum + fib2
}
}
fibseq
# version 2
fibseq <- c(1,1)
fib1 = 1; fib2 = 1
sum = 0
while(fib2 <= 4e6){
#  fib2 = fib2 + fib1
fibseq <- c(fibseq, fib2<- fib2+fib1 )
fib1 = fib2 - fib1
if (fib2 %% 2 == 0){
sum = sum + fib2
}
}
fibseq
# version 2
fibseq <- c(1,1)
fib1 = 1; fib2 = 1
sum = 0
while(fib2 <= 4e6){
#  fib2 = fib2 + fib1
fibseq = c(fibseq, fib2 = fib2+fib1 )
fib1 = fib2 - fib1
if (fib2 %% 2 == 0){
sum = sum + fib2
}
}
rm(list=ls())
fibseq <- c(1,1)
fib1 = 1; fib2 = 1
sum = 0
while(fib2 <= 4e6){
#  fib2 = fib2 + fib1
fibseq <- c(fibseq, fib2 <- fib2+fib1 )
fib1 = fib2 - fib1
if (fib2 %% 2 == 0){
sum <- sum + fib2
}
}
fibseq
sum
i = 2; x = c(1,1)
while ( x[i]< 4e6 ) {
x[i+1] = x[i] + x[i-1] # fibonaci
i = i+1
}
x = x[-i] # remove the last one
max(x)
# sum of even-valued terms
sum(x[x%%2==0])
max(fibseq)
fibseq <- c(1,1)
fib1 = 1; fib2 = 1
sum = 0
while(fib2 <= 4e6){
fibseq <- c(fibseq, fib2 <- fib2+fib1)
fib1 = fib2 - fib1
# sum of even-valued terms
if (fib2 %% 2 == 0){
sum <- sum + fib2
}
}
fibseq
max(fibseq)
sum
fibseq <- c(1,1)
fib1 = 1; fib2 = 1
sum = 0
while(fib2 <= 4e6){
fibseq = c(fibseq, fib2 <- fib2+fib1)
fib1 = fib2 - fib1
# sum of even-valued terms
if (fib2 %% 2 == 0){
sum <- sum + fib2
}
}
fibseq
max(fibseq)
sum
fibseq[-length(fibseq)]
fibseq
fibseq <- fibseq[-length(fibseq)] # remove the last one
fibseq[-length(fibseq)]
# version 2
fibseq <- c(1,1)
fib1 = 1; fib2 = 1
sum = 0
while(fib2 <= 4e6){
fibseq <- c(fibseq, fib2 <- fib2+fib1)
fib1 = fib2 - fib1
# sum of even-valued terms
if (fib2 %% 2 == 0){
sum <- sum + fib2
}
}
fibseq
a=c(1,2,3)
a
a
a[-3]
a
a<-a[-3]
a
fibseq <- c(1,1)
fib1 = 1; fib2 = 1
sum = 0
while(fib2 <= 4e6){
fibseq <- c(fibseq, fib2 <- fib2+fib1)
fib1 = fib2 - fib1
}
fibseq <- fibseq[-length(fibseq)] # remove the last one
max(fibseq)
fibseq
sum(fibseq%%2==0)
sum(sapply(fibseq, function(x) x%%2==0)
)
sapply(fibseq, function(x) x%%2==0)
sum(fibseq[fibseq%%2==0])
i = 2; x = c(1,1)
while ( x[i]< 4e6 ) {
x[i+1] = x[i] + x[i-1] # fibonaci
i = i+1
}
x = x[-i] # remove the last one
max(x)
# sum of even-valued terms
sum(x[x%%2==0])
fib <- c(1,1)
fib1 = 1; fib2 = 1
while(fib2 <= 4e6){
fib <- c(fib, fib2 <- fib2+fib1)
fib1 = fib2 - fib1
}
fib <- fib[-length(fib)] # remove the last one
max(fib)
# sum of even-valued terms
sum(fib[fib%%2==0])
fib <- c(1,1)
fib1 = 1; fib2 = 1
while(fib2 <= 4e6){
fib <- c(fib, fib2 <- fib2+fib1)
fib1 = fib2 - fib1
}
fib <- fib[-length(fib)] # remove the last one
max(fib)
# sum of even-valued terms
sum(fib[fib%%2==0])
fib <- c(1,1)
fib1 = 1; fib2 = 1
while(fib2 <= 4e6){
fib <- c(fib, fib2 <- fib2+fib1)
fib1 = fib2 - fib1
}
fib <- fib[-length(fib)] # remove the last one
fib
max(fib)
# sum of even-valued terms
sum(fib[fib%%2==0])
cat('\nmatrix(',nrow(mat),',',ncol(mat),')\n'); print(mat)
source('~/.active-rstudio-document')
x = c(2,1,3)
A = matrix(1:9, 3, 3, byrow = TRUE)
y = c()
for (i in 1:nrow(A)) {
sum = 0
for (j in 1:ncol(A)) {
sum = sum + A[i, j] * x[j]
}
y[i] = sum
}
y
source('~/.active-rstudio-document')
mad( c(2, 6, 6, 12, 17, 25, 32) )
mad = function(v){
return(median(abs(v - median(v))))
}
mad( c(2, 6, 6, 12, 17, 25, 32) )
source('~/.active-rstudio-document')
a = letters[0:5]
paste0( a, sort( rep(a,length(a)) ) )
gameOfCraps = function(p = 0){
x = sum(sample(1:6, 2, replace = T))
if (p == 0) {
if (x == 7 | x == 11){return("Win")}
else if (x %in% c(2, 3, 12)){return("Loss")}
else {
gameOfCraps(x)
}
}
else {
if (x == 7){return("Loss")}
else if (x == p){return("Win")}
else {gameOfCraps(p)}
}
}
gameOfCraps()
gameOfCraps()
sapply(c(1:1000), gameOfCraps())
sapply(c(1:1000), function () gameOfCraps())
sapply(c(1:1000), function() gameOfCraps())
gameOfCraps()
gameOfCraps()
gameOfCraps()
gameOfCraps()
c(1:1000)
res = c()
for(i in 1:1000){
res<-c(res, gameOfCraps())
}
res
res = c()
for(i in 1:1000){
res<-c(res, gameOfCraps())
}
head(res)
rm(list=ls())
